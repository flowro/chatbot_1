import os
import re

def scan_for_passwords(directory):
    password_regex = re.compile(r'(?i)password\s*=\s*[\'"][^\'"]*[\'"]')

    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)

            try:
                with open(file_path, 'r') as f:
                    lines = f.readlines()

                for line in lines:
                    if password_regex.search(line):
                        print(f'Possible password found in: {file_path}\nLine: {line}')
            except Exception as e:
                # Skip files we can't open, they might be binary or a system file.
                print(f'Skipped file {file_path} due to error: {e}')

scan_for_passwords('<your_directory_here>')







en_core_web_sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.4.0/en_core_web_sm-3.4.0-py3-none-any.whl

import rsconnect

# Create a deployment options object
options = rsconnect.DeploymentOptions()

# Set the name of the server
options.server = "https://example.com"

# Set the title of the app
options.app_title = "My Awesome App"

# Set the API key
options.api_key = "your_api_key"

# Add extra files to the deployment
options.extra_files = ["path/to/file1.txt", "path/to/file2.csv"]

# Deploy the application
rsconnect.deployApp(app_directory="path/to/app", deployment_options=options)



import datetime

def get_previous_month():
    # Get the current date
    current_date = datetime.datetime.now()

    # Calculate the previous month
    if current_date.month == 1:
        previous_month = 12
    else:
        previous_month = current_date.month - 1

    # Format the previous month as a string with leading zero if necessary
    previous_month_str = str(previous_month).zfill(2)

    return previous_month_str


# Load the Word document
doc = docx.Document("input.docx")

# Extract the content from the document
content = ""
for paragraph in doc.paragraphs:
    content += paragraph.text + "\n"

# Summarize the content
summary = summarize_text(content)

# Find the specific location where you want to insert the summary
# Update this with the logic to locate the specific location in the document

# Insert the summary at the specific location
specific_location = "Specific Location"  # Update with your specific location
for paragraph in doc.paragraphs:
    if specific_location in paragraph.text:
        paragraph.insert_paragraph_before(summary)
        break

# Save the modified document as a copy
doc.save("output.docx")






from bs4 import BeautifulSoup
import json

def html_table_to_json(html):
    soup = BeautifulSoup(html, 'html.parser')
    table = soup.find('table')  # Find the table element
    
    headers = []
    rows = []
    
    # Extract table headers
    for th in table.find_all('th'):
        headers.append(th.text.strip())
    
    # Extract table rows and cells
    for tr in table.find_all('tr'):
        row = {}
        for index, td in enumerate(tr.find_all('td')):
            row[headers[index]] = td.text.strip()
        rows.append(row)
    
    return json.dumps(rows)
    
    
    function displayBotResponse(response) {
    var messageContainer = document.createElement('div');
    messageContainer.classList.add('message-container');
    var botMessage = document.createElement('div');
    botMessage.classList.add('bot-message');
    messageContainer.appendChild(botMessage);
    $('#chatbox').append(messageContainer);
    
    if (response.startsWith("<html>") && response.endsWith("</html>")) {
        // If the response is HTML code, create an iframe to render it
        var iframe = document.createElement('iframe');
        iframe.srcdoc = response;
        iframe.style.width = '100%';
        iframe.style.height = '300px'; // Set the desired height
        botMessage.appendChild(iframe);
    } else {
        // Otherwise, treat it as plain text and apply the typewriter animation
        typeMessage('Bot: ', botMessage, function() {
            typeMessage(response, botMessage);
        });
    }
}
